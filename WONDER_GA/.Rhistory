theme_minimal()
names(table.dat)[names(table.dat) == "emgc_ca"] <- "Magnesium"
names(table.dat)[names(table.dat) == "epotcon"] <- "Potassium"
names(table.dat)[names(table.dat) == "esodc_ca"] <- "Sodium"
# Select relevant variables for correlation
cor_data <- table.dat %>% select(eGFR, Age, Magnesium, Potassium, Sodium)
# Calculate correlation matrix
cor_matrix <- cor(cor_data, use = "complete.obs")
# Melt the correlation matrix for ggplot
cor_melted <- melt(cor_matrix)
# Heatmap of correlations
ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0, limit = c(-1,1), name="Correlation") +
labs(title = "Correlation Matrix Heatmap of eGFR, Age, Magnesium Conc., Potassium Conc., and Sodium Conc. in Urine",
x = "Variables",
y = "Variables") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
names(table.dat)[names(table.dat) == "age"] <- "Age"
names(table.dat)[names(table.dat) == "ckd_epi"] <- "eGFR"
names(table.dat)[names(table.dat) == "anp"] <- "proANP"
names(table.dat)[names(table.dat) == "tkv"] <- "Total Kidney Volume"
#Paired scatter plots
colnames(table.dat)
pairs(table.dat[, c("eGFR", "Age", "proANP", "Total Kidney Volume")],
main = "Scatter Plot Matrix of eGFR, Age, proANP, and Total Kidney Volume",
pch = 21, bg = "lightblue")
table.dat$Age_Group <- cut(table.dat$Age, breaks = c(0, 30, 50, 70, 100),
labels = c("0-30", "31-50", "51-70", "71+"),
right = FALSE)
# Box plot of eGFR by Gender and Age Group
ggplot(table.dat, aes(x = gender, y = eGFR, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Age_Group) +
labs(title = "eGFR by Gender and Age Group",
x = "Gender",
y = "Estimated GFR") +
theme_minimal()
```
names(table.dat)[names(table.dat) == "emgc_ca"] <- "Magnesium"
names(table.dat)[names(table.dat) == "epotcon"] <- "Potassium"
names(table.dat)[names(table.dat) == "esodc_ca"] <- "Sodium"
# Select relevant variables for correlation
cor_data <- table.dat %>% select(eGFR, Age, Magnesium, Potassium, Sodium)
# Calculate correlation matrix
cor_matrix <- cor(cor_data, use = "complete.obs")
# Melt the correlation matrix for ggplot
cor_melted <- melt(cor_matrix)
# Heatmap of correlations
ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0, limit = c(-1,1), name="Correlation") +
labs(title = "Correlation Matrix Heatmap of eGFR, Age, Magnesium Conc., Potassium Conc., and Sodium Conc. in Urine",
x = "Variables",
y = "Variables") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Box plot of eGFR by Gender and Age Group
ggplot(table.dat, aes(x = gender, y = eGFR, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Age_Group) +
labs(title = "eGFR by Gender and Age Group",
x = "Gender",
y = "Estimated GFR") +
theme_minimal()
#Rename columns for convenience
names(table.dat)[names(table.dat) == "age"] <- "Age"
names(table.dat)[names(table.dat) == "ckd_epi"] <- "eGFR"
names(table.dat)[names(table.dat) == "anp"] <- "proANP"
names(table.dat)[names(table.dat) == "tkv"] <- "Total Kidney Volume"
#Paired scatter plots
colnames(table.dat)
pairs(table.dat[, c("eGFR", "Age", "proANP", "Total Kidney Volume")],
main = "Scatter Plot Matrix of eGFR, Age, proANP, and Total Kidney Volume",
pch = 21, bg = "lightblue")
```
#load the data
table.dat <- read.csv("crisp_sub_dataset_clean.csv")
names(table.dat)[names(table.dat) == "age"] <- "Age"
names(table.dat)[names(table.dat) == "ckd_epi"] <- "eGFR"
names(table.dat)[names(table.dat) == "anp"] <- "proANP"
#Paired scatter plots
colnames(table.dat)
pairs(table.dat[, c("eGFR", "Age", "proANP", "tkv")],
main = "Scatter Plot Matrix of eGFR, Age, proANP, and Total Kidney Volume",
pch = 21, bg = "lightblue")
# Create Age Group variable
table.dat$Age_Group <- cut(table.dat$Age, breaks = c(0, 30, 50, 70, 100),
labels = c("0-30", "31-50", "51-70", "71+"),
right = FALSE)
# Box plot of eGFR by Gender and Age Group
ggplot(table.dat, aes(x = gender, y = eGFR, fill = gender)) +
geom_boxplot() +
facet_wrap(~ Age_Group) +
labs(title = "eGFR by Gender and Age Group",
x = "Gender",
y = "Estimated GFR") +
theme_minimal()
# Rename columns for heatmap
names(table.dat)[names(table.dat) == "emgc_ca"] <- "Magnesium"
names(table.dat)[names(table.dat) == "epotcon"] <- "Potassium"
names(table.dat)[names(table.dat) == "esodc_ca"] <- "Sodium"
# Select relevant variables for correlation
cor_data <- table.dat %>% select(eGFR, Age, Magnesium, Potassium, Sodium)
# Calculate correlation matrix
cor_matrix <- cor(cor_data, use = "complete.obs")
# Melt the correlation matrix for ggplot
cor_melted <- melt(cor_matrix)
# Heatmap of correlations
ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0, limit = c(-1,1), name="Correlation") +
labs(title = "Correlation Matrix Heatmap of eGFR, Age, Magnesium Conc., Potassium Conc., and Sodium Conc. in Urine",
x = "Variables",
y = "Variables") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
names(table.dat)[names(table.dat) == "emgc_ca"] <- "Magnesium"
names(table.dat)[names(table.dat) == "epotcon"] <- "Potassium"
names(table.dat)[names(table.dat) == "esodc_ca"] <- "Sodium"
# Select relevant variables for correlation
cor_data <- table.dat %>% select(eGFR, Age, Magnesium, Potassium, Sodium)
# Calculate correlation matrix
cor_matrix <- cor(cor_data, use = "complete.obs")
# Melt the correlation matrix for ggplot
cor_melted <- melt(cor_matrix)
# Heatmap of correlations
ggplot(cor_melted, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "red", high = "blue", mid = "white",
midpoint = 0, limit = c(-1,1), name="Correlation") +
labs(title = "Correlation Matrix Heatmap of eGFR, Age, Magnesium Conc., Potassium Conc., and Sodium Conc. in Urine",
x = "Variables",
y = "Variables") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load required libraries
library(ggplot2)
library(dplyr)
library(knitr)
library(readr)
library(kableExtra)
install.packages("kableExtra")
library(kableExtra)
library(here)
data <- read_csv(here("data", "Maternal_Health_Risk_Data_Set.csv"))
summary_stats <- readRDS(here("output", "summary_stats.rds"))
knitr::kable(summary_stats, caption = "Summary Statistics of Maternal Health Dataset")
risk_level_summary <- readRDS(here("output", "risk_level_summary.rds"))
knitr::kable(risk_level_summary, caption = "Average Physiological Features by Risk Level")
heart_rate_distribution <- readRDS(here("output", "heart_rate_distribution.rds"))
knitr::kable(heart_rate_distribution, caption = "Heart Rate Distribution by Risk Level")
knitr::include_graphics(here("output", "age_boxplot.png"))
knitr::include_graphics(here("output", "heart_rate_boxplot.png"))
library(tidyverse)
library(gtsummary)
library(ggplot2)
library(here)
library(gt)
table_one <- readRDS(
here::here("output/table_one.rds"))
#| fig.cap = "Figure 1. Disribution of Glucose Levels"
figure1 <- readRDS(
here::here("output/figure_1.rds")
)
table2 <- readRDS(
here::here("output/log_regr_summary.rds")
)
table_one <- readRDS(
here::here("output", "table_one.rds"))
figure_1 <- readRDS("~/Documents/data550final/10jariwalap_data550/output/figure_1.rds")
log_regr_summary <- readRDS("~/Documents/data550final/10jariwalap_data550/output/log_regr_summary.rds")
table_one <- readRDS("~/Documents/data550final/10jariwalap_data550/output/table_one.rds")
table_one <- readRDS(
here::here("output", "table_one.rds"))
table_one <- readRDS(
here::here("output/table_one.rds"))
#| fig.cap = "Figure 1. Disribution of Glucose Levels"
figure1 <- readRDS(
here::here("output/figure_1.rds")
)
library(tidyverse)
library(gtsummary)
library(ggplot2)
library(here)
library(gt)
print(table_one)
table_one
figure1
figure1 <- readRDS(
here::here("output/figure_1.rds")
)
source("~/Highcharter Rscript.R")
# download necessary libraries
library(dplyr)
library(readxl)
library(DT)
ga09 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga09.csv")
ga10 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga10.csv")
ga11 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga11.csv")
ga12 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga12.csv")
ga13 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga13.csv")
ga14 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga14.csv")
ga15 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga15.csv")
ga16 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga16.csv")
ga17 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga17.csv")
ga18 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga18.csv")
ga19 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga19.csv")
ga20 <- read.csv("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/ga20.csv")
gaData <- ga09 |>
left_join(ga10, by = c("COUNTY", "COUNTYFIPS"))
library(ggplot2)
library(plotly)
ga20$TOT_DEATH <- as.numeric(ga20$TOT_DEATH)
top_counties <- ga20 |>
group_by(COUNTY) |>
summarize(total_deaths = sum(TOT_DEATH, na.rm = TRUE)) |>
arrange(desc(total_deaths)) |>
slice_max(order_by = total_deaths, n = 10)
p <- ggplot(top_counties, aes(x = reorder(COUNTY, total_deaths), y = total_deaths, text = total_deaths)) +
geom_bar(stat = "identity", fill = "plum3") +
coord_flip() +
theme_minimal() +
labs(title = "Top 10 Counties with Highest Deaths Related to Cancer", x = "County", y = "Total Deaths")
ggplotly(p, tooltip = "text")
library(highcharter)
library(dplyr)
library(viridis)
library(sf)
library(geojsonio)
library(tigris)
ga_map <- counties(state = "GA", year = 2020, class = "sf")
print(ga_map)
merged_map <- merge(ga_map, ga20, by.x = "GEOID", by.y = "COUNTYFIPS")
print(merged_map)
geojson_file <- tempfile(fileext = ".geojson")
st_write(merged_map, geojson_file, driver = "GeoJSON")
ga_geojson <- geojson_read(geojson_file, what = "sp")
ga_geojson_list <- geojson_list(ga_geojson)
n <- 4
colstops <- data.frame(
q = 0:n/n,
c = substring(viridis(n + 1), 0, 7)
) %>%
list_parse2()
highchart(type = "map") |>
hc_add_series_map(
map = ga_geojson_list,  # Use Georgia GeoJSON
df = merged_map,   # Use dataset
name = "Deaths",
value = "TOT_DEATH",  # Map death count
joinBy = c("GEOID", "GEOID"),  # Ensure ID matching
dataLabels = list(enabled = TRUE, format = '{point.properties.NAME}')
) |>
hc_colorAxis(stops = colstops) |>
hc_legend(valueDecimals = 0, valueSuffix = " deaths") |>
hc_mapNavigation(enabled = TRUE) |>
hc_add_theme(hc_theme_flat())
file_path <- ("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA/")
files <- list.files(path = file_path, pattern = "ga.*\\.csv", full.names = TRUE)
master_df <- do.call(rbind, lapply(files, read.csv))
dfs <- lapply(files, function(file) {
df <- read.csv(file)
# Ensure all required columns exist
required_cols <- c("YEAR", "COUNTYFIPS", "STATE", "TOT_DEATH")
missing_cols <- setdiff(required_cols, colnames(df))
# Add missing columns with NA values
df[missing_cols] <- NA
# Keep only the required columns (in correct order)
df <- df[required_cols]
return(df)
})
master_df <- bind_rows(dfs)
str(master_df)
dfs <- lapply(files, function(file) {
df <- read.csv(file)
required_cols <- c("YEAR", "COUNTYFIPS", "COUNTY", "STATE", "TOT_DEATH")
missing_cols <- setdiff(required_cols, colnames(df))
df[missing_cols] <- NA
df <- df[required_cols]
return(df)
})
master_df <- bind_rows(dfs)
str(master_df)
table(master_df$Year)
table(master_df$YEAR)
library(ggplot2)
library(plotly)
library(plotly)
library(dplyr)
deathTrend <- master_df |>
group_by(YEAR) |>
summarise(Total_Deaths = sum(TOT_DEATH, na.rm = TRUE))
masterDf <- bind_rows(dfs)
str(masterDf)
masterDf <- as.numeric(TOT_DEATH)
masterDf <- as.numeric(masterDF$TOT_DEATH)
masterDf <- as.numeric(masterDF$"TOT_DEATH")
masterDf <- bind_rows(dfs)
masterDf <- as.numeric(masterDF$"TOT_DEATH")
masterDf$TOT_DEATH <- as.numeric(masterDF$TOT_DEATH)
master_df$TOT_DEATH <- as.numeric(master_df$TOT_DEATH)
deathTrend <- master_df |>
group_by(YEAR) |>
summarise(Total_Deaths = sum(TOT_DEATH, na.rm = TRUE))
death_trend <- master_df |>
group_by(YEAR) |>
summarise(Total_Deaths = sum(TOT_DEATH, na.rm = TRUE))
p <- plot_ly(death_trend, x = ~YEAR, y = ~Total_Deaths, type = 'scatter', mode = 'lines+markers',
line = list(shape = "linear", width = 2), marker = list(size = 6)) |>
layout(title = "Total Deaths Related to Cancer in Georgia from 2009 to 2020",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Deaths"),
hovermode = "x")
p
library(ggplot2)
library(plotly)
library(highcharter)
library(dplyr)
library(viridis)
library(sf)
library(geojsonio)
library(tigris)
ga_map <- counties(state = "GA", year = 2020, class = "sf")
ga_map <- counties(state = "GA", year = 2020, class = "sf")
print(ga_map)
merged_map <- merge(ga_map, master_df, by.x = "GEOID", by.y = "COUNTYFIPS")
print(merged_map)
geojson_file <- tempfile(fileext = ".geojson")
st_write(merged_map, geojson_file, driver = "GeoJSON")
ga_geojson <- geojson_read(geojson_file, what = "sp")
ga_geojson_list <- geojson_list(ga_geojson)
highchart(type = "map") |>
hc_add_series_map(
map = ga_geojson_list,  # Use Georgia GeoJSON
df = merged_map,   # Use dataset
name = "Deaths",
value = "TOT_DEATH",  # Map death count
joinBy = c("GEOID", "GEOID"),  # Ensure ID matching
dataLabels = list(enabled = TRUE, format = '{point.properties.NAME}')
) |>
hc_colorAxis(stops = colstops) |>
hc_legend(valueDecimals = 0, valueSuffix = " deaths") |>
hc_mapNavigation(enabled = TRUE) |>
hc_add_theme(hc_theme_flat())
death_trend <- master_df |>
group_by(YEAR, COUNTY) |>
summarise(Total_Deaths = sum(TOT_DEATH, na.rm = TRUE))
P <- plot_ly(death_trend,
x = ~Year,
y = ~Total_Deaths,
color = ~COUNTY,  # Color each line by county
type = 'scatter',
mode = 'lines+markers') %>%
layout(title = "Deaths by County Over Time (2009-2020)",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Deaths"),
hovermode = "x",
legend = list(title = list(text = "County")))
P
p
P
P <- plot_ly(death_trend,
x = ~YEAR,
y = ~Total_Deaths,
color = ~COUNTY,  # Color each line by county
type = 'scatter',
mode = 'lines+markers') %>%
layout(title = "Deaths by County Over Time (2009-2020)",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Deaths"),
hovermode = "x",
legend = list(title = list(text = "County")))
P
top_20_counties <- master_df |>
group_by(COUNTY) |>
summarise(Total_Deaths = sum(TOT_DEATH, na.rm = TRUE)) |>
arrange(desc(Total_Deaths)) |>
slice(1:20) |>
pull(COUNTY)
death_trend <- master_df |>
group_by(Year, County) |>
summarise(Total_Deaths = sum(Deaths, na.rm = TRUE), .groups = "drop") |>
mutate(Visible = ifelse(County %in% top_20_counties, TRUE, FALSE))
death_trend <- master_df |>
group_by(YEAR, COUNTY) |>
summarise(Total_Deaths = sum(TOT_DEATH, na.rm = TRUE), .groups = "drop") |>
mutate(Visible = ifelse(County %in% top_20_counties, TRUE, FALSE))
death_trend <- master_df |>
group_by(YEAR, COUNTY) |>
summarise(Total_Deaths = sum(TOT_DEATH, na.rm = TRUE), .groups = "drop") |>
mutate(Visible = ifelse(COUNTY %in% top_20_counties, TRUE, FALSE))
# Create plot with only top 20 counties visible by default
p <- plot_ly()
# Add lines for each county
for (County in unique(death_trend$COUNTY)) {
fig <- fig |>
add_trace(
data = subset(death_trend, COUNTY == County),
x = ~YEAR,
y = ~Total_Deaths,
type = 'scatter',
mode = 'lines+markers',
name = County,
visible = ifelse(County %in% top_20_counties, TRUE, "legendonly")  # Top 20 visible, others hidden
)
}
# Add lines for each county
for (County in unique(death_trend$COUNTY)) {
p <- p |>
add_trace(
data = subset(death_trend, COUNTY == County),
x = ~YEAR,
y = ~Total_Deaths,
type = 'scatter',
mode = 'lines+markers',
name = County,
visible = ifelse(County %in% top_20_counties, TRUE, "legendonly")  # Top 20 visible, others hidden
)
}
# Add a dropdown menu to control county selection
p <- p |>
layout(
title = "Deaths by County Over Time (Top 20 Shown by Default)",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Deaths"),
hovermode = "x",
updatemenus = list(
list(
type = "dropdown",
x = 1.15,
y = 1.15,
xanchor = "right",
yanchor = "top",
buttons = lapply(unique(death_trend$County), function(cty) {
list(
method = "restyle",
args = list("visible", lapply(unique(death_trend$County), function(x) x == cty)),
label = cty
)
})
)
)
)
# Add a dropdown menu to control county selection
p <- p |>
layout(
title = "Deaths by County Over Time (Top 20 Shown by Default)",
xaxis = list(title = "Year"),
yaxis = list(title = "Total Deaths"),
hovermode = "x",
updatemenus = list(
list(
type = "dropdown",
x = 1.15,
y = 1.15,
xanchor = "right",
yanchor = "top",
buttons = lapply(unique(death_trend$COUNTY), function(County) {
list(
method = "restyle",
args = list("visible", lapply(unique(death_trend$COUNTY), function(x) x == County)),
label = County
)
})
)
)
)
P
p
library(highcharter)
library(dplyr)
library(viridis)
library(sf)
library(geojsonio)
library(tigris)
ga_map <- counties(state = "GA", year = 2020, class = "sf")
print(ga_map)
merged_map <- merge(ga_map, master_df, by.x = "GEOID", by.y = "COUNTYFIPS")
print(merged_map)
geojson_file <- tempfile(fileext = ".geojson")
st_write(merged_map, geojson_file, driver = "GeoJSON")
ga_geojson <- geojson_read(geojson_file, what = "sp")
ga_geojson_list <- geojson_list(ga_geojson)
n <- 4
colstops <- data.frame(
q = 0:n/n,
c = substring(viridis(n + 1), 0, 7)
) %>%
list_parse2()
highchart(type = "map") |>
hc_add_series_map(
map = ga_geojson_list,  # Use Georgia GeoJSON
df = merged_map,   # Use dataset
name = "Deaths",
value = "TOT_DEATH",  # Map death count
joinBy = c("GEOID", "GEOID"),  # Ensure ID matching
dataLabels = list(enabled = TRUE, format = '{point.properties.NAME}')
) |>
hc_colorAxis(stops = colstops) |>
hc_legend(valueDecimals = 0, valueSuffix = " deaths") |>
hc_mapNavigation(enabled = TRUE) |>
hc_add_theme(hc_theme_flat())
setwd(/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA)
setwd("/Users/ka-hyoncho/Documents/Capstone/data/WONDER_GA")
file.exists('/Users/ka-hyoncho/.local/share/rstudio/notebooks/359817D4-Project 3/1/2820E5EB9aa0da2f/c3cnd2qiyhmyr_t/_rs_html_deps_89db160ead4b.json')
setwd("~/Documents/Capstone/data/WONDER_GA")
